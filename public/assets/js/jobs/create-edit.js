/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/js/jobs/create-edit.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/jobs/create-edit.js ***!
  \*************************************************/
/***/ (() => {

eval("$(document).ready(function () {\n  'use strict';\n\n  new AutoNumeric('#toSalary', {\n    maximumValue: 9999999999,\n    currencySymbol: '',\n    digitGroupSeparator: '\\,',\n    decimalPlaces: 1,\n    currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.suffix\n  });\n  new AutoNumeric('#fromSalary', {\n    maximumValue: 9999999999,\n    currencySymbol: '',\n    digitGroupSeparator: '\\,',\n    decimalPlaces: 1,\n    currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.suffix\n  });\n  $('#toSalary').on('keyup', function () {\n    var fromSalary = parseInt(Math.trunc(removeCommas($('#fromSalary').val())));\n    var toSalary = parseInt(Math.trunc(removeCommas($('#toSalary').val())));\n    if (toSalary < fromSalary) {\n      $('#toSalary').focus();\n      $('#salaryToErrorMsg').text(Lang.get('messages.job.please_enter_salary_range_to_greater_than_salary_range_from'));\n      $('.actions [href=\\'#next\\']').css({\n        'opacity': '0.7',\n        'pointer-events': 'none'\n      });\n      $('#saveJob').attr('disabled', true);\n    } else {\n      $('#salaryToErrorMsg').text('');\n      $('.actions [href=\\'#next\\']').css({\n        'opacity': '1',\n        'pointer-events': 'inherit'\n      });\n      $('#saveJob').attr('disabled', false);\n    }\n  });\n  $('#toSalary').on('wheel', function (e) {\n    $(this).trigger('keyup');\n  });\n  $('#fromSalary').on('keyup', function () {\n    var fromSalary = parseInt(Math.trunc(removeCommas($('#fromSalary').val())));\n    var toSalary = parseInt(Math.trunc(removeCommas($('#toSalary').val())));\n    if (toSalary < fromSalary) {\n      $('#fromSalary').focus();\n      $('#salaryToErrorMsg').text(Lang.get('messages.job.please_enter_salary_range_to_greater_than_salary_range_from'));\n      $('.actions [href=\\'#next\\']').css({\n        'opacity': '0.7',\n        'pointer-events': 'none'\n      });\n      $('#saveJob').attr('disabled', true);\n    } else {\n      $('#salaryToErrorMsg').text('');\n      $('.actions [href=\\'#next\\']').css({\n        'opacity': '1',\n        'pointer-events': 'inherit'\n      });\n      $('#saveJob').attr('disabled', false);\n    }\n  });\n  $('#fromSalary').on('wheel', function (e) {\n    $(this).trigger('keyup');\n  });\n  $('#jobTypeId,#jobCategoryId,#careerLevelsId,#jobShiftId,#countryId,#stateId,#cityId,#salaryPeriodsId,#requiredDegreeLevelId,#functionalAreaId').select2({\n    width: !employerPanel ? 'calc(100% - 44px)' : '100%'\n  });\n  $('#preferenceId,#currencyId,#countryID,#stateID').select2({\n    width: '100%'\n  });\n  $('#SkillId').select2({\n    width: !employerPanel ? 'calc(100% - 44px)' : '100%',\n    placeholder: 'Select Job Skill'\n  });\n  $('#tagId').select2({\n    width: !employerPanel ? 'calc(100% - 44px)' : '100%',\n    placeholder: 'Select Job Tag'\n  });\n  if (!$('#companyId').hasClass('.select2-hidden-accessible') && $('#companyId').is('select')) {\n    $('#companyId').select2({\n      width: '100%',\n      placeholder: 'Select Company'\n    });\n  }\n  var date = new Date();\n  date.setDate(date.getDate() + 1);\n  $('.expiryDatepicker').datetimepicker(DatetimepickerDefaults({\n    format: 'YYYY-MM-DD',\n    useCurrent: false,\n    sideBySide: true,\n    minDate: new Date()\n  }));\n  $('#createJobForm, #editJobForm').on('submit', function (e) {\n    $('#saveJob,#draftJob').attr('disabled', true);\n    if (!checkSummerNoteEmpty('#details', 'Job Description field is required.', 1)) {\n      e.preventDefault();\n      $('#saveJob,#draftJob').attr('disabled', false);\n      return false;\n    }\n    if ($('#salaryToErrorMsg').text() !== '') {\n      $('#toSalary').focus();\n      $('#saveJob,#draftJob').attr('disabled', false);\n      return false;\n    }\n  });\n  $('#details').summernote({\n    minHeight: 200,\n    height: 200,\n    placeholder: 'Enter Job Details...',\n    toolbar: [['style', ['bold', 'italic', 'underline', 'clear']], ['font', ['strikethrough']], ['para', ['paragraph']]]\n  });\n  $('#jobTypeDescription, #jobCategoryDescription, #skillDescription, #salaryPeriodDescription, #jobShiftDescription, #jobTagDescription').summernote({\n    minHeight: 200,\n    height: 200,\n    toolbar: [['style', ['bold', 'italic', 'underline', 'clear']], ['font', ['strikethrough']], ['para', ['paragraph']]]\n  });\n  $('#editDetails').summernote({\n    minHeight: 200,\n    height: 200,\n    placeholder: 'Enter Job Details...',\n    toolbar: [['style', ['bold', 'italic', 'underline', 'clear']], ['font', ['strikethrough']], ['para', ['paragraph']]]\n  });\n  $('#countryId').on('change', function () {\n    $.ajax({\n      url: jobStateUrl,\n      type: 'get',\n      dataType: 'json',\n      data: {\n        postal: $(this).val()\n      },\n      success: function success(data) {\n        $('#stateId').empty();\n        $('#stateId').append($('<option value=\"\"></option>').text('Select State'));\n        $.each(data.data, function (i, v) {\n          $('#stateId').append($('<option></option>').attr('value', i).text(v));\n        });\n      }\n    });\n  });\n  $('#stateId').on('change', function () {\n    $.ajax({\n      url: jobCityUrl,\n      type: 'get',\n      dataType: 'json',\n      data: {\n        state: $(this).val(),\n        country: $('#countryId').val()\n      },\n      success: function success(data) {\n        $('#cityId').empty();\n        $.each(data.data, function (i, v) {\n          $('#cityId').append($('<option></option>').attr('value', i).text(v));\n        });\n      }\n    });\n  });\n  window.autoNumeric = function (formId, validationBox) {\n    $(formId)[0].reset();\n    $('select.select2Selector').each(function (index, element) {\n      var drpSelector = '#' + $(this).attr('id');\n      $(drpSelector).val('');\n      $(drpSelector).trigger('change');\n    });\n    $(validationBox).hide();\n  };\n});\n//job Type\n$(document).on('click', '.addJobTypeModal', function () {\n  $('#addJobTypeModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addJobTypeForm', function (e) {\n  e.preventDefault();\n  if (!checkSummerNoteEmpty('#jobTypeDescription', 'Description field is required.', 1)) {\n    return true;\n  }\n  processingBtn('#addJobTypeForm', '#jobTypeBtnSave', 'loading');\n  $.ajax({\n    url: jobTypeSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addJobTypeModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#jobTypeId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addJobTypeForm', '#jobTypeBtnSave');\n    }\n  });\n});\n$('#addJobTypeModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addJobTypeForm', '#jobTypeValidationErrorsBox');\n  $('#jobTypeDescription').summernote('code', '');\n});\n//job category\n$(document).on('click', '.addJobCategoryModal', function () {\n  $('#addJobCategoryModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addJobCategoryForm', function (e) {\n  e.preventDefault();\n  processingBtn('#addJobCategoryForm', '#jobCategoryBtnSave', 'loading');\n  if (!checkSummerNoteEmpty('#jobCategoryDescription', 'Description field is required.')) {\n    processingBtn('#addJobCategoryForm', '#jobCategoryBtnSave');\n    return true;\n  }\n  $.ajax({\n    url: jobCategorySaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addJobCategoryModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#jobCategoryId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addJobCategoryForm', '#jobCategoryBtnSave');\n    }\n  });\n});\n$('#addJobCategoryModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addJobCategoryForm', '#jobCategoryValidationErrorsBox');\n  $('#jobCategoryDescription').summernote('code', '');\n});\n//skill\n$(document).on('click', '.addSkillModal', function () {\n  $('#addSkillModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addSkillForm', function (e) {\n  e.preventDefault();\n  if (!checkSummerNoteEmpty('#skillDescription', 'Description field is required.')) {\n    return true;\n  }\n  processingBtn('#addSkillForm', '#skillBtnSave', 'loading');\n  $.ajax({\n    url: skillSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addSkillModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#SkillId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addSkillForm', '#skillBtnSave');\n    }\n  });\n});\n$('#addSkillModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addSkillForm', '#skillValidationErrorsBox');\n  $('#skillDescription').summernote('code', '');\n});\n//salary period\n$(document).on('click', '.addSalaryPeriodModal', function () {\n  $('#addSalaryPeriodModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addSalaryPeriodForm', function (e) {\n  e.preventDefault();\n  if (!checkSummerNoteEmpty('#salaryPeriodDescription', 'Description field is required.', 1)) {\n    return true;\n  }\n  processingBtn('#addSalaryPeriodForm', '#salaryPeriodBtnSave', 'loading');\n  $.ajax({\n    url: salaryPeriodSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addSalaryPeriodModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.period\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#salaryPeriodsId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addSalaryPeriodForm', '#salaryPeriodBtnSave');\n    }\n  });\n});\n$('#addSalaryPeriodModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addSalaryPeriodForm', '#salaryPeriodValidationErrorsBox');\n  $('#salaryPeriodDescription').summernote('code', '');\n});\n//country\n$(document).on('click', '.addCountryModal', function () {\n  $('#addCountryModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addCountryForm', function (e) {\n  e.preventDefault();\n  processingBtn('#addCountryForm', '#countryBtnSave', 'loading');\n  $.ajax({\n    url: countrySaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addCountryModal').modal('hide');\n        console.log(result.data);\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#countryId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addCountryForm', '#countryBtnSave');\n    }\n  });\n});\n$('#addCountryModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addCountryForm', '#countryValidationErrorsBox');\n});\n// state\n$(document).on('click', '.addStateModal', function () {\n  $('#addStateModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addStateForm', function (e) {\n  e.preventDefault();\n  processingBtn('#addStateForm', '#stateBtnSave', 'loading');\n  $.ajax({\n    url: stateSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addStateModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#stateId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addStateForm', '#stateBtnSave');\n    }\n  });\n});\n$('#addStateModal').on('hidden.bs.modal', function () {\n  $('#countryID').val('').trigger('change');\n  resetModalForm('#addStateForm', '#StateValidationErrorsBox');\n});\n//city\n$(document).on('click', '.addCityModal', function () {\n  $('#addCityModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addCityForm', function (e) {\n  e.preventDefault();\n  processingBtn('#addCityForm', '#cityBtnSave', 'loading');\n  $.ajax({\n    url: citySaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addCityModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#cityId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addCityForm', '#cityBtnSave');\n    }\n  });\n});\n$('#addCityModal').on('hidden.bs.modal', function () {\n  $('#stateID').val('').trigger('change');\n  resetModalForm('#addCityForm', '#cityValidationErrorsBox');\n});\n//career level\n$(document).on('click', '.addCareerLevelModal', function () {\n  $('#addCareerModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addCareerForm', function (e) {\n  e.preventDefault();\n  processingBtn('#addCareerForm', '#careerBtnSave', 'loading');\n  $.ajax({\n    url: careerLevelSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addCareerModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.level_name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#careerLevelsId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addCareerForm', '#careerBtnSave');\n    }\n  });\n});\n$('#addCareerModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addCareerForm', '#careerValidationErrorsBox');\n});\n//job shift\n$(document).on('click', '.addJobShiftModal', function () {\n  $('#addJobShiftModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addJobShiftForm', function (e) {\n  e.preventDefault();\n  if (!checkSummerNoteEmpty('#jobShiftDescription', 'Description field is required.', 1)) {\n    processingBtn('#addJobShiftForm', '#jobShiftBtnSave');\n    return true;\n  }\n  processingBtn('#addJobShiftForm', '#jobShiftBtnSave', 'loading');\n  $.ajax({\n    url: jobShiftSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addJobShiftModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.shift\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#jobShiftId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addJobShiftForm', '#jobShiftBtnSave');\n    }\n  });\n});\n$('#addJobShiftModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addJobShiftForm', '#jobShiftValidationErrorsBox');\n  $('#jobShiftDescription').summernote('code', '');\n});\n//job tag\n$(document).on('click', '.addJobTagModal', function () {\n  $('#addJobTagModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addJobTagForm', function (e) {\n  e.preventDefault();\n  processingBtn('#addJobTagForm', '#jobTagBtnSave', 'loading');\n  if (!checkSummerNoteEmpty('#jobTagDescription', 'Description field is required.')) {\n    processingBtn('#addJobTagForm', '#jobTagBtnSave');\n    return true;\n  }\n  $.ajax({\n    url: jobTagSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addJobTagModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#tagId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addJobTagForm', '#jobTagBtnSave');\n    }\n  });\n});\n$('#addJobTagModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addJobTagForm', '#jobTagValidationErrorsBox');\n  $('#jobTagDescription').summernote('code', '');\n});\n//degree level\n$(document).on('click', '.addRequiredDegreeLevelTypeModal', function () {\n  $('#addDegreeLevelModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addDegreeLevelForm', function (e) {\n  e.preventDefault();\n  processingBtn('#addDegreeLevelForm', '#degreeLevelBtnSave', 'loading');\n  $.ajax({\n    url: requiredDegreeLevelSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addDegreeLevelModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#requiredDegreeLevelId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addDegreeLevelForm', '#degreeLevelBtnSave');\n    }\n  });\n});\n$('#addDegreeLevelModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addDegreeLevelForm', '#degreeLevelValidationErrorsBox');\n});\n\n//functional area\n$(document).on('click', '.addFunctionalAreaModal', function () {\n  $('#addFunctionalModal').appendTo('body').modal('show');\n});\n$(document).on('submit', '#addFunctionalForm', function (e) {\n  e.preventDefault();\n  processingBtn('#addFunctionalForm', '#functionalBtnSave', 'loading');\n  $.ajax({\n    url: functionalAreaSaveUrl,\n    type: 'POST',\n    data: $(this).serialize(),\n    success: function success(result) {\n      if (result.success) {\n        displaySuccessMessage(result.message);\n        $('#addFunctionalModal').modal('hide');\n        var data = {\n          id: result.data.id,\n          text: result.data.name\n        };\n        var newOption = new Option(data.text, data.id, false, true);\n        $('#functionalAreaId').append(newOption).trigger('change');\n      }\n    },\n    error: function error(result) {\n      displayErrorMessage(result.responseJSON.message);\n    },\n    complete: function complete() {\n      processingBtn('#addFunctionalForm', '#functionalBtnSave');\n    }\n  });\n});\n$('#addFunctionalModal').on('hidden.bs.modal', function () {\n  resetModalForm('#addFunctionalForm', '#functionalValidationErrorsBox');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/jobs/create-edit.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/js/jobs/create-edit.js"]();
/******/ 	
/******/ })()
;